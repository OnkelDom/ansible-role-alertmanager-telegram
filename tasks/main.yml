---
- name: create system group
  group:
    name: "{{ telegram_system_group }}"
    system: true
    state: present
  when: telegram_system_group != "root"
  become: true
  tags: telegram

- name: create system user
  user:
    name: "{{ telegram_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ telegram_system_group }}"
    createhome: false
  when: telegram_system_user != "root"
  become: true
  tags: telegram

- name: create configuration and data directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ telegram_system_user }}"
    group: "{{ telegram_system_group }}"
    mode: 0755
  with_items:
    - "{{ telegram_config_dir }}"
    - "{{ telegram_template_dir }}"
  become: true
  tags: telegram

- name: check if telegram is installed
  stat:
    path: "{{ telegram_binary_install_dir }}/telegram"
  register: __telegram_is_installed
  become: true
  tags: telegram

- name: download binary to bin folder
  get_url:
    url: "https://github.com/metalmatze/alertmanager-bot/releases/download/{{ telegram_version }}/alertmanager-bot-{{ telegram_version }}-linux-{{ go_arch }}"
    dest: "/tmp/telegram-{{ telegram_version }}.linux-{{ go_arch }}"
  environment: "{{ proxy_env }}"
  register: _download_binary
  until: _download_binary is succeeded
  retries: 5
  delay: 2
  delegate_to: localhost
  check_mode: false
  become: true
  tags: telegram
  when: (not __telegram_is_installed.stat.exists)

- name: propagate binaries
  copy:
    src: "/tmp/telegram-{{ telegram_version }}.linux-{{ go_arch }}"
    dest: "{{ telegram_binary_install_dir }}/telegram"
    mode: 0755
    owner: root
    group: root
  notify: restart telegram
  become: true
  tags: telegram
  when: (not __telegram_is_installed.stat.exists)

- name: copy templates
  copy:
    src: "{{ telegram_config_template }}"
    dest: "{{ telegram_config_dir }}/templates/{{ telegram_config_template }}"
    mode: 0755
    owner: root
    group: root
  notify: restart telegram
  become: true
  tags: telegram

- name: create systemd service unit
  template:
    src: telegram.service.j2
    dest: /etc/systemd/system/telegram.service
    owner: root
    group: root
    mode: 0644
  notify: restart telegram
  become: true
  tags: telegram

- name: ensure service is started and enabled
  systemd:
    daemon_reload: true
    name: telegram
    state: restarted
    enabled: true
  become: true
  tags: telegram
